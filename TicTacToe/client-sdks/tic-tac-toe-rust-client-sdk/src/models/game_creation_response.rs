/*
 * Tic-Tac-Toe Service
 *
 * Tic-Tac-Toe Game Service
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: JoelDavisEngineering@Gmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GameCreationResponse : Models the results of a call to one of the Game creation endpoints
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameCreationResponse {
    /// The initial Game state
    #[serde(rename = "game_info")]
    pub game_info: models::GameInfoResponse,
    /// The Player who initiated the Gaming Session
    #[serde(rename = "initiating_player")]
    pub initiating_player: models::PlayerInfo,
    /// ID of the additional Player
    #[serde(rename = "other_player", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub other_player: Option<Option<models::PlayerInfo>>,
    /// ID of the Gaming Session
    #[serde(rename = "session_id")]
    pub session_id: String,
}

impl GameCreationResponse {
    /// Models the results of a call to one of the Game creation endpoints
    pub fn new(game_info: models::GameInfoResponse, initiating_player: models::PlayerInfo, session_id: String) -> GameCreationResponse {
        GameCreationResponse {
            game_info,
            initiating_player,
            other_player: None,
            session_id,
        }
    }
}

