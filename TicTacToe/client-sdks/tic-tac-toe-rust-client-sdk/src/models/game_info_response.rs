/*
 * Tic-Tac-Toe Service
 *
 * Tic-Tac-Toe Game Service
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: JoelDavisEngineering@Gmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// GameInfoResponse : Models the current view of a Game
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameInfoResponse {
    /// Player who has an open turn
    #[serde(rename = "current_player", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub current_player: Option<Option<models::PlayerInfo>>,
    /// Unique ID of the Game instance
    #[serde(rename = "game_id")]
    pub game_id: String,
    /// The current state the Game
    #[serde(rename = "game_state")]
    pub game_state: models::GameState,
    /// List of Players
    #[serde(rename = "players")]
    pub players: Vec<models::PlayerInfo>,
}

impl GameInfoResponse {
    /// Models the current view of a Game
    pub fn new(game_id: String, game_state: models::GameState, players: Vec<models::PlayerInfo>) -> GameInfoResponse {
        GameInfoResponse {
            current_player: None,
            game_id,
            game_state,
            players,
        }
    }
}

