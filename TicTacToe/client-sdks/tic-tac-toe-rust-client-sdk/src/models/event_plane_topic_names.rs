/*
 * Tic-Tac-Toe Service
 *
 * Tic-Tac-Toe Game Service
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: JoelDavisEngineering@Gmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// EventPlaneTopicNames : Defines the names of the subscription topics used in the real-time messaging event plane.  A full topic takes the form:  `[topic_prefix]/[event topic name]`  NOTE: The topic_prefix can be obtained from the event_plane_config field of the GameCreationResult model that is returned when creating a new Game or when adding a new Player to a Game.
/// Defines the names of the subscription topics used in the real-time messaging event plane.  A full topic takes the form:  `[topic_prefix]/[event topic name]`  NOTE: The topic_prefix can be obtained from the event_plane_config field of the GameCreationResult model that is returned when creating a new Game or when adding a new Player to a Game.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventPlaneTopicNames {
    #[serde(rename = "AllPlayersReady")]
    AllPlayersReady,
    #[serde(rename = "GameDeleted")]
    GameDeleted,
    #[serde(rename = "GameEndedInStalemate")]
    GameEndedInStalemate,
    #[serde(rename = "GameEndedInWin")]
    GameEndedInWin,
    #[serde(rename = "GameStarted")]
    GameStarted,
    #[serde(rename = "SessionDeleted")]
    SessionDeleted,
    #[serde(rename = "TurnTaken")]
    TurnTaken,

}

impl std::fmt::Display for EventPlaneTopicNames {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::AllPlayersReady => write!(f, "AllPlayersReady"),
            Self::GameDeleted => write!(f, "GameDeleted"),
            Self::GameEndedInStalemate => write!(f, "GameEndedInStalemate"),
            Self::GameEndedInWin => write!(f, "GameEndedInWin"),
            Self::GameStarted => write!(f, "GameStarted"),
            Self::SessionDeleted => write!(f, "SessionDeleted"),
            Self::TurnTaken => write!(f, "TurnTaken"),
        }
    }
}

impl Default for EventPlaneTopicNames {
    fn default() -> EventPlaneTopicNames {
        Self::AllPlayersReady
    }
}

