/*
 * Tic-Tac-Toe Service
 *
 * Tic-Tac-Toe Game Service
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: Support@RustMadeEasy.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// GameInfo : Models the view of a Game.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameInfo {
    #[serde(
        rename = "current_player",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub current_player: Option<Option<models::PlayerInfo>>,
    /// Code used to invite the second player to the game
    #[serde(rename = "game_invitation_code")]
    pub game_invitation_code: String,
    #[serde(rename = "game_state")]
    pub game_state: models::GameState,
    /// Unique ID of the Game Engine
    #[serde(rename = "id")]
    pub id: String,
    /// List of Players
    #[serde(rename = "players")]
    pub players: Vec<models::PlayerInfo>,
}

impl GameInfo {
    /// Models the view of a Game.
    pub fn new(
        game_invitation_code: String,
        game_state: models::GameState,
        id: String,
        players: Vec<models::PlayerInfo>,
    ) -> GameInfo {
        GameInfo {
            current_player: None,
            game_invitation_code,
            game_state,
            id,
            players,
        }
    }
}
