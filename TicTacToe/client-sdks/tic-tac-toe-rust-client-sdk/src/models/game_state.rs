/*
 * Tic-Tac-Toe Service
 *
 * Tic-Tac-Toe Game Service
 *
 * The version of the OpenAPI document: 0.2.0
 * Contact: Support@RustMadeEasy.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

/// GameState : * Defines Game State related structs and enums.  *  * © 2024 Rust Made Easy. All rights reserved.  * @author Info@RustMadeEasy.com Models the state of a game at a particular move.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GameState {
    #[serde(rename = "game_board")]
    pub game_board: Vec<Vec<models::GamePiece>>,
    /// ID of the Player who made this Move.
    #[serde(rename = "id_of_player_who_made_move")]
    pub id_of_player_who_made_move: String,
    #[serde(rename = "play_status")]
    pub play_status: models::PlayStatus,
    #[serde(
        rename = "winning_locations",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub winning_locations: Option<Option<Vec<models::BoardPosition>>>,
    #[serde(
        rename = "winning_player_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub winning_player_id: Option<Option<String>>,
}

impl GameState {
    /// * Defines Game State related structs and enums.  *  * © 2024 Rust Made Easy. All rights reserved.  * @author Info@RustMadeEasy.com Models the state of a game at a particular move.
    pub fn new(
        game_board: Vec<Vec<models::GamePiece>>,
        id_of_player_who_made_move: String,
        play_status: models::PlayStatus,
    ) -> GameState {
        GameState {
            game_board,
            id_of_player_who_made_move,
            play_status,
            winning_locations: None,
            winning_player_id: None,
        }
    }
}
