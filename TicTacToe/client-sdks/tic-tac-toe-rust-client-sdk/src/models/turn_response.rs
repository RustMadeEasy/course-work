/*
 * Tic-Tac-Toe Service
 *
 * Tic-Tac-Toe Game Service
 *
 * The version of the OpenAPI document: 0.4.0
 * Contact: JoelDavisEngineering@Gmail.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TurnResponse : Models the results of a call to the Get Latest Game Turn end point
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TurnResponse {
    /// Player who will take the next turn
    #[serde(rename = "current_player", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub current_player: Option<Option<models::PlayerInfo>>,
    /// The state of the Game after the turn has been taken
    #[serde(rename = "new_game_state")]
    pub new_game_state: models::GameState,
    /// If the Game has ended in a win, this contains the winning board positions
    #[serde(rename = "winning_locations", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub winning_locations: Option<Option<Vec<models::BoardPosition>>>,
    /// If the Game has ended in a win, this indicates the winning Player
    #[serde(rename = "winning_player", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub winning_player: Option<Option<models::PlayerInfo>>,
}

impl TurnResponse {
    /// Models the results of a call to the Get Latest Game Turn end point
    pub fn new(new_game_state: models::GameState) -> TurnResponse {
        TurnResponse {
            current_player: None,
            new_game_state,
            winning_locations: None,
            winning_player: None,
        }
    }
}

