//
// GamingSessionCreationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Models the results of a call to the Create Gaming Session endpoint */
public struct GamingSessionCreationResponse: Codable, JSONEncodable, Hashable {

    /** Specifies the configuration required for clients to subscribe to real-time Game state updates */
    public var eventPlaneConfig: EventPlaneConfig
    /** The Player who initiated the Gaming Session */
    public var initiatingPlayer: PlayerInfo
    /** Unique Code that is used to invite other participants to the Gaming Session */
    public var invitationCode: String
    /** ID of the additional Player */
    public var otherPlayer: PlayerInfo?
    /** Identifies the Gaming Session. This also serves as the communication channel for MQTT notifications. */
    public var sessionId: String

    public init(eventPlaneConfig: EventPlaneConfig, initiatingPlayer: PlayerInfo, invitationCode: String, otherPlayer: PlayerInfo? = nil, sessionId: String) {
        self.eventPlaneConfig = eventPlaneConfig
        self.initiatingPlayer = initiatingPlayer
        self.invitationCode = invitationCode
        self.otherPlayer = otherPlayer
        self.sessionId = sessionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventPlaneConfig = "event_plane_config"
        case initiatingPlayer = "initiating_player"
        case invitationCode = "invitation_code"
        case otherPlayer = "other_player"
        case sessionId = "session_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(eventPlaneConfig, forKey: .eventPlaneConfig)
        try container.encode(initiatingPlayer, forKey: .initiatingPlayer)
        try container.encode(invitationCode, forKey: .invitationCode)
        try container.encodeIfPresent(otherPlayer, forKey: .otherPlayer)
        try container.encode(sessionId, forKey: .sessionId)
    }
}

